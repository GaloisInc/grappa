
--
-- List utilities
--
-- We prefix them with "g_" so they do not clash with the Haskell namespace
--

fun g_replicate (0::Int) a = Nil
    g_replicate n a = Cons a (g_replicate (n-1) a)

fun g_head Nil = gerror 100
    g_head (Cons x _) = x

fun g_tail Nil = gerror 200
    g_tail (Cons _ xs) = xs

fun g_length Nil = 0
    g_length (Cons _ xs) = 1 + g_length xs

-- Build a static list of a fixed size from a possibly dynamic list
fun static_list (0::Int) xs = Nil
    static_list len xs =
      Cons (g_head xs) (static_list (len - 1) (g_tail xs))

fun g_nth (0::Int) (Cons x xs) = x
    g_nth n (Cons x xs) = g_nth (n-1) xs
    g_nth n Nil = gerror 137

-- A version of g_nth that builds a static list
fun g_nth_len len n xs = static_list len (g_nth n xs)

fun realsToProbs Nil = Nil
    realsToProbs (Cons r rs) =
      Cons (realToProb r) (realsToProbs rs)


--
-- Probability matrices
--

-- Generate a matrix of transition probabilities from some n_src source states
-- to n_dest states by drawing the transition probabilities from a symmetric
-- Dirichlet distribution with concentration parameter alpha
model prob_matrix alpha (0::Int) n_dest { Nil } = nothing
      prob_matrix alpha n_src n_dest { Cons xs xss } =
  xs ~ dirichlet (g_replicate n_dest alpha)
  xss ~ prob_matrix alpha (n_src - 1) n_dest

-- Choose a new state given a current state st and a probability matrix
model sample_prob_matrix pmatrix st { st_next } =
  st_next ~ categorical (g_nth st pmatrix)


--
-- HMMs
--

-- Generate probability matrices for transitions between hidden states and for
-- relating hidden states to observed states in a hidden Markov model, as well
-- as a list of probabilities for the initial state
model hmm_params alpha_hid alpha_obs n_hid n_obs { (trans_pm, obs_pm, init) } =
  trans_pm ~ prob_matrix alpha_hid n_hid n_hid
  obs_pm   ~ prob_matrix alpha_obs n_hid n_obs
  init     ~ dirichlet (g_replicate n_hid 1)

model hmm_sequence n_hid n_obs
                   (trans_pmat, obs_pmat, init) { Nil } = nothing
                                                { (Cons (hid,o) hid_os) } =
  hid ~ categorical (realsToProbs init)
  o ~ categorical (realsToProbs (g_nth_len n_obs hid obs_pmat))
  hid_os ~ hmm_sequence n_hid n_obs (trans_pmat, obs_pmat,
                                     (g_nth_len n_hid hid trans_pmat)
                                    )

model iid d { Nil } = nothing
            { Cons x xs } =
  x ~ d
  xs ~ iid d

model hmm alpha_hid alpha_obs n_hid n_obs { (params, hids_obs_seqs) } =
  params        ~ hmm_params alpha_hid alpha_obs n_hid n_obs
  hids_obs_seqs ~ iid (hmm_sequence n_hid n_obs params)


--
-- Top-level Main Function
--

main =
  (_, [ [ (_,o) | o <- os ]
        | os <- source from "examples/hmm_data1.json" as json ]) ~ hmm 1.0 1.0 2 2
  -- using prior ()
  using bpNuts (50, 20, 10)
